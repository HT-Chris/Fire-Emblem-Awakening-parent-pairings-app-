
/*



steps to create fire emblem child maker matchmakers

    check if parents are opposite sex
        -- side project to get child's hair color portrait from father
    grab all children that the parents can have and grab the child data
    if male, pass down jobs
        check what classes overlap
        check gender specific classes and convert them
        get list of all skills from passed down classes
    which skill each parent is passing down
        present all skills from parent's classes
    find the child's stat cap
        -- base stat side project
    get base growths for parent and child and use formula to calculate
    -- side project show characters that child have supports with

*/


let unit = {
    name: 'chrom',
    sex: 'male',
    child: 'lucina',
    jobs: {
        base:{
            starting: { 
                        base: 'lord',
                        promote: 'great lord'
                        },
            reClass: {
                optionOne:{ 
                            base: 'archer',
                            promote: ['sniper', 'bow knight'] 
                            },
                optionTwo:{ 
                            base:'cavalier',
                            promote: ['general', 'great knight']
                            }
                     },
            passingDownClasses: 
                            [array] // may separate classes base on sex
            }  
         },
    allSkills: [ 'all skills'],
    passingClasses:[ array],
    skillTaught: null,
    stats:[array], 
    modStats:[array],
        // side project to determine starting stats, 
        //enter parent's stats but cant go lower then their base stats or stat cap
        //add random stats level up or average button base off of parent's growths
    growths:['array']

}

/*
PARENT
    base data with no other functions
        name, sex, child, 

    data that needs a function
        jobs
            starting into promotes
                available skills for all them
            passing down classes
        stats cap modifiers and growths

    user enter fields
        skill taught  
        parent's current stats


*/


/*
CHILDREN
    base data
        name, cannon parent, initial base classes and re-classes, supports

    user enter fields
        other parent, inherited skills,
                --stats at birth

    functions fields
        hair color, passing down classes, all skills, stat caps, starting stats, growths 
            

*/

let lucina = {
    name: 'Lucina',
    parentCannon: 'chrom', // mother usually
    otherParent: null,
    hairColor: null,
    baseClasses: {
                    starting: { 
                                base: 'lord',
                                promote: 'great lord'
                                },
                    reClass: {
                        optionOne:{ 
                                    base: 'archer',
                                    promote: ['sniper', 'bow knight'] 
                                    },
                        optionTwo:{ 
                                    base:'cavalier',
                                    promote: ['general', 'great knight']
                                    }
                            },
 
                  },
    passedDownClasses: null,
    inheritedSkills: [array],
    allSkills:[array],
    statCaps: [array],
    startingStats: [array],
    growths: [array],
    supports: [array]

}





class character{

    constructor(baseClass, reClass){
        this.baseClass = baseClass;
        this.reClass = reClass
       
}
}


let sully= new character('cavalier', ['myrmidon', 'wyvernRider'])

console.log(sully)